{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 292.09999999999997, 266.7, MM, 1)\nArm_motor_a = Motor(Ports.PORT6, GearSetting.RATIO_36_1, True)\nArm_motor_b = Motor(Ports.PORT7, GearSetting.RATIO_36_1, False)\nArm = MotorGroup(Arm_motor_a, Arm_motor_b)\nRatchet = Motor(Ports.PORT21, GearSetting.RATIO_18_1, False)\nSARMS = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nFlywheeel = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control Arm\n            if controller_1.buttonL1.pressing():\n                Arm.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                Arm.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                Arm.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control Flywheeel\n            if controller_1.buttonR1.pressing():\n                Flywheeel.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                Flywheeel.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                Flywheeel.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n\nRatchet.set_max_torque(100,PERCENT)\nRatchet.set_stopping(HOLD)\nFlywheeel.set_velocity(100,PERCENT)\nArm.set_max_torque(100,PERCENT)\ndrivetrain.set_drive_velocity(100,PERCENT)\ndrivetrain.set_turn_velocity(100,PERCENT)\ndrivetrain.set_stopping(COAST)\nSARMS.set_velocity(100,PERCENT)\nmyVariable = 0\ndef when_started1():\n    global myVariable\n    while(True):\n\n        controller_1.screen.clear_screen()\n        controller_1.screen.set_cursor(1,1)\n        controller_1.screen.print(\"left-right(1,3) \"+str(controller_1.axis1.position())+\",\"+str(controller_1.axis3.position()))\n        controller_1.screen.next_row()\n        controller_1.screen.print(\"up-down(2,4) \"+str(controller_1.axis2.position())+\",\"+str(controller_1.axis4.position()))\n        brain.screen.set_cursor(1,1)\n        brain.screen.print(\"battery voltage \"+str(brain.battery.voltage(VOLT))+\" Volts \")\n        brain.screen.next_row()\n        brain.screen.print(\"battery current \"+str(brain.battery.current(CurrentUnits.AMP))+\" Amps \")\n        brain.screen.next_row()\n        brain.screen.print(\"battery capacity \"+str(brain.battery.capacity())+\" Percent\")\n        brain.screen.next_row()\n        brain.screen.print(\"temp of VFlywheel \"+str(Flywheeel.temperature(PERCENT))+\"\")\n        brain.screen.next_row()\n        brain.screen.print(\"avg temp of arm \"+str(Arm.temperature(PERCENT))+\"\")\n        brain.screen.next_row()\n        brain.screen.print(\"avg temp of wheels \"+str(drivetrain.temperature(PERCENT))+\"\")\n        brain.screen.draw_rectangle(0,119,320,81)\n        brain.screen.draw_line(80,119,80,200)\n        brain.screen.draw_line(160,119,160,200)\n        brain.screen.draw_line(240,119,240,200)\n        brain.screen.set_cursor(7,2)\n        brain.screen.print(\"Left\")\n        brain.screen.set_cursor(8,2)\n        brain.screen.print(\"middle\")\n        brain.screen.set_cursor(9,2)\n        brain.screen.print(\"motor\")\n        brain.screen.set_cursor(10,2)\n        brain.screen.print(\"\"+str(left_motor_b.temperature(PERCENT)))\n        brain.screen.set_cursor(7,11)\n        brain.screen.print(\"Left\")\n        brain.screen.set_cursor(8,11)\n        brain.screen.print(\"rear\")\n        brain.screen.set_cursor(9,11)\n        brain.screen.print(\"motor\")\n        brain.screen.set_cursor(10,11)\n        brain.screen.print(str(left_motor_a.temperature(PERCENT)))\n        brain.screen.set_cursor(7,18)\n        brain.screen.print(\"right\")\n        brain.screen.set_cursor(8,18)\n        brain.screen.print(\"middle\")\n        brain.screen.set_cursor(9,18)\n        brain.screen.print(\"motor\")\n        brain.screen.set_cursor(10,18)\n        brain.screen.print(\"\"+str(right_motor_b.temperature(PERCENT)))\n        brain.screen.set_cursor(7,26)\n        brain.screen.print(\"right\")\n        brain.screen.set_cursor(8,26)\n        brain.screen.print(\"rear\")\n        brain.screen.set_cursor(9,26)\n        brain.screen.print(\"motor\")\n        brain.screen.set_cursor(10,26)\n        brain.screen.print(str(right_motor_a.temperature(PERCENT)))\n        brain.screen.set_cursor(11,1)\n        brain.screen.print(\"right arm motor temperature \"+str(Arm_motor_b.temperature(PERCENT)))\n        brain.screen.set_cursor(12,1)\n        brain.screen.print(\"Left arm motor temperature \"+str(Arm_motor_a.temperature(PERCENT)))\n\n        wait(0.75,SECONDS)\n        brain.screen.clear_screen()\nwhen_started1()\n\n","textLanguage":"python","rconfig":[{"port":[3,4,1,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"11.5","unit":"in","wheelbase":"10.5","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[6,7],"name":"Arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[21],"name":"Ratchet","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[5],"name":"SARMS","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"Flywheeel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Arm","leftDir":"false","right":"Flywheeel","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22}],"slot":7,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}